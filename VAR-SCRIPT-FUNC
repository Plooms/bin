#!/bin/bash
# The Function MOAS (Mother of All Scripts)
#SCRIPT_NAME="VAR-SCRIPT-FUNC"
#PID=$$



##########################  Functions #################################
####################################################


RANDOM_COLOR()
{

  # This is really random color generation

  COLOR=$((RANDOM % 7 + 31)) # set 31 to 30 for dark on light
  RC="\e[1;${COLOR}m"    # set 1 to 0 for dark on light
  echo -e "$RC"
}


####################################################
####################################################


RANDOM_COLOR_SEQ()
{

  # This is sequential and not really random

  COLOR=$((31 + (++COLOR % 7)))   # set 31 to 30 for dark on light
  RC="\e[1;${COLOR}m" # set 1 to 0 for dark on light
  echo -e "$RC"
}


####################################################
####################################################


_CANCEL_MSG() { clear ; YELLOW ; echo -e "\n\n\n JOB CANCELED \n\n" ; }


####################################################
####################################################


_CANCEL_MSG2() 
{

  clear ; YELLOW ;

  echo -e "\n\n\n  JOB CANCELED
  
  [  "$HOME_BACKUP_FOLDER"  ]
  
  OR
  
  [  "$HOME_BACKUP_FOLDER2"  ]

  ${RED}(Not Available) 
  \n\n"

}


####################################################
####################################################

_CHECK_MOUNT1() 
{ 

mount | grep $NAS1_MOUNT_POINT > /dev/null \
&&	[ ! -z "$NAS_ALIVE_CHECK" ] \
&& [ -f "$NAS1_MOUNT_POINT"/"$NAS_ALIVE_CHECK" ] \
&& CHECK="$(cat $NAS1_MOUNT_POINT/$NAS_ALIVE_CHECK)" \
&& [ -r $NAS1_MOUNT_POINT/$NAS_ALIVE_CHECK ] && [ $CHECK = 0 ]
	if [ "$?" != 0 ]
	then echo "Please check that $NAS1_MOUNT_POINT is mounted and alive"
	exit 1
	fi

}

_CHECK_NAS() 
{ 

sudo ping -c1 -t2 "$NASx_IP" > /dev/null \
&& mount | grep $NASx_MOUNT_POINT > /dev/null \
&&	[ ! -z "$NAS_ALIVE_CHECK" ] \
&& [ -f "$NASx_MOUNT_POINT"/"$NAS_ALIVE_CHECK" ] \
&& CHECK="$(cat $NASx_MOUNT_POINT/$NAS_ALIVE_CHECK)" \
&& [ -r $NASx_MOUNT_POINT/$NAS_ALIVE_CHECK ] && [ $CHECK = 0 ]
	if [ "$?" != 0 ]
	then echo "Please check that $NASx_MOUNT_POINT is mounted and alive"
	exit 1
	fi

}


_CHECK_NAS1() 
{ 

	export NASx_IP="$NAS1_IP"
	export NASx_MOUNT_POINT="$NAS1_MOUNT_POINT"
	_CHECK_NAS

}



_CHECK_NAS2() 
{ 

	export NASx_IP="$NAS2_IP"
	export NASx_MOUNT_POINT="$NAS2_MOUNT_POINT"
	_CHECK_NAS

}


_CHECK_NAS3() 
{
	
	export NASx_IP="$NAS3_IP"
	export NASx_MOUNT_POINT="$NAS3_MOUNT_POINT"
	_CHECK_NAS

}


_CHECK_NAS4() 
{
	
	export NASx_IP="$NAS4_IP"
	export NASx_MOUNT_POINT="$NAS4_MOUNT_POINT"
	_CHECK_NAS

}


####################################################
####################################################


_START_TIME() { START_TIME=$(date +%s) ; }


####################################################
####################################################


_END_TIME()
{ 
	END_TIME=$(date +%s)
	END_TIME_MIN=$(( END_TIME - START_TIME ))
	END_TIME=$(date +%s)
	END_TIME_SEC=$(( END_TIME - START_TIME ))
	END_TIME_MIN=$(( (END_TIME - START_TIME) / 60 ))
	END_TIME_HR=$(( END_TIME_MIN / 60 ))
	RUN_TIME="$(echo $END_TIME_SEC s)"
	[[ "$END_TIME_MIN" -gt 0 ]] && RUN_TIME="$(echo $RUN_TIME - $END_TIME_MIN Min)"
	[[ "$END_TIME_HR"  -gt 0 ]] && RUN_TIME="$(echo $RUN_TIME - $END_TIME_HR Hrs)"
	echo -e "\nScript:  $SCRIPT_NAME"
	echo -e "Runtime:   ${COLOR_OFF}$RUN_TIME"

}

####################################################
####################################################

_RUN_CHECK() 
{
	if [[ "$1" = "-c"* ]] ;then _LOCK_CHECK ; fi

}


####################################################
####################################################

_LOCK_CHECK() 
{

  if [ -e "${LOCKFILE}" ] && kill -0 "$(cat "${LOCKFILE}")" 2>/dev/null ; then
  _LOCK_MSG
  exit 1
  else
  echo "Script Not running"
  exit 0
  fi
}


####################################################
####################################################  

_LOCK_ON() 
{

  if [ -e "${LOCKFILE}" ] && kill -0 "$(cat "${LOCKFILE}")" 2>/dev/null ; then
  _LOCK_MSG
  exit
  fi
  
  trap "rm -f ${LOCKFILE} ; exit" INT TERM EXIT
  echo $$ > "${LOCKFILE}"
}


####################################################
####################################################  


_LOCK_OFF() { rm -f "${LOCKFILE}" ;exit ; }


####################################################
####################################################


_LOCK_MSG() 
{ 

  echo -e "
  ${RED} The process is already running with PID:($(cat "$LOCKFILE")), please wait...
		
  if you are sure it is not running, then ${YELLOW}

      rm -f $LOCKFILE  

      sudo kill -9 $(cat "$LOCKFILE")" 
	
	exit 1
}


####################################################
####################################################
_PROGRESS()
{       

	#spin='-\|/'
	#i=0
	#while kill -0 "$PID" 2>/dev/null
	#do
	#  i=$(( (i+1) %4 ))
	#  printf "\r${spin:$i:1}"
	#  sleep .1
	#done &


	while kill -0 "$PID" 2>/dev/null
	do
    echo -ne '/ / / \r'
    sleep .1
    echo -ne '- - - \r'
    sleep .1
    echo -ne '\ \ \ \r'
    sleep .1
    echo -ne '| | | \r'
    sleep .1
	done &
	
}


####################################################
####################################################
_BEEP()
{

	beep 2>/dev/null;sleep .2
	beep 2>/dev/null;sleep .2
	beep 2>/dev/null;sleep .4
	beep 2>/dev/null;sleep .4
	beep 2>/dev/null;sleep .4
	beep 2>/dev/null
	beep 2>/dev/null;sleep .6
	beep 2>/dev/null;sleep .2
	beep 2>/dev/null;sleep .2
	beep 2>/dev/null;sleep 2

}


####################################################
####################################################

