#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-add"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


answer=$(dialog --extra-button --extra-label "Back" --stdout --menu \
"Choose the command You Wish to Execute" 14 50 50 \
"1- Add Show" "" \
"2- Add Anime" "" )

case $? in
0)

if [ "$answer" = "1- Add Show" ]
then c.ln2tb-tv-add


elif [ "$answer" = "2- Add Anime" ]
then c.ln2tb-anime-add

fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac


#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-add"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT




answer=$(dialog --extra-button --extra-label "Back" --stdout --menu \
"Choose the command You Wish to Execute (ADD)" 14 50 50 \
"1- Single Anime" "" \
"2- Multiple Anime" ""  )


case $? in
0)

if [ "$answer" = "1- Single Anime" ]
then c.ln2tb-anime-add-single

elif [ "$answer" = "2- Multiple Anime" ]
then c.ln2tb-anime-add-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac

#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-add-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT




start=$(dialog --stdout --help-button --help-label "Cancel" --yesno \
"Did you add the Anime names to $BATCH_FILE_TV_ADD_DELETE " 10 50 )

case $? in
0)
if [ -f $BATCH_FILE_TV_ADD_DELETE ]
then

cat $BATCH_FILE_TV_ADD_DELETE | while read -r LINE ; \

do 

if [ -d "$TV_SYM2"/"$LINE" ]
then RED
else GREEN
fi


mkdir -v "$TV_SYM2"/"$LINE"
sudo chmod 777 "$TV_SYM2"/"$LINE"

done

# The sed expressions here are special to this file only, for general use sed's , go to c.ln2tb-anime-add
cat $BATCH_FILE_TV_ADD_DELETE | while read -r name ; do echo $name | sed 's/ /\\\\\\ /g' | sed "s/'//g" | sed "s/(/\\\\\\\(/g" | sed "s/)/\\\\\\\)/g" | sed 's/&/\\\\\\&/g' | sed 's/;/\\\\\\;/g' | sed 's/://g' ; done > $BATCH_FILE_TV_ADD_DELETE2


while read name3 name2 ; do 
sudo echo "if ls -U | grep -E '"$name3"' >/dev/null 2>&1 ; then mv -v "$name3" \""\$TV_SYM2"\"/\""$name2"\"/              2>/dev/null ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move; done < <(paste $BATCH_FILE_TV_ADD_DELETE2 $BATCH_FILE_TV_ADD_DELETE)

while read name3 name2 ; do 
sudo echo "if ls -U | grep -E '"$name3"' ; then mv -v "$name3" \""\$TV_SYM2"\"/\""$name2"\"/              ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move1; done < <(paste $BATCH_FILE_TV_ADD_DELETE2 $BATCH_FILE_TV_ADD_DELETE)



else
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-anime-add-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-anime-add-batch
;;
2)
_CANCEL_MSG ;;
esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-add-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout --inputbox \
"Please Enter the name of the Anime" 10 50 )

case $? in
0)

echo $name | sed 's/ /\\ /g' | sed "s/'\+//g" | sed "s/(/\\\(/g" | sed "s/)/\\\)/g" | sed 's/&/\\&/g' | sed 's/;/\\;/g' | sed 's/://g'  > /tmp/pipe
name2=$(tail /tmp/pipe)


name3=$(dialog --extra-button --extra-label "Back" --stdout  --inputbox "Is this Correct ?" 10 50 "$name2" )

case $? in
0)

echo -e "\n\n\n"

if [ -d "$TV_SYM2"/"$name" ]
then RED
else GREEN
fi

mkdir -v "$TV_SYM2"/"$name"
sudo chmod 777 "$TV_SYM2"/"$name"


if [ "$?" = 0 ]
then

sudo echo "if ls -U | grep -E '"$name3"' >/dev/null 2>&1 ; then mv -v "$name3" \""\$TV_SYM2"\"/\""$name"\"/              2>/dev/null ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move

sudo echo "if ls -U | grep -E '"$name3"' ; then mv -v "$name3" \""\$TV_SYM2"\"/\""$name"\"/             ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move1


fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-delete"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout --menu \
"Choose the command You Wish to Execute (Delete)" 14 50 50 \
"1- Single Anime" "" \
"2- Multiple Anime" "" \
"3- Delete Episodes" ""  )


case $? in
0)

if [ "$answer" = "1- Single Anime" ]
then c.ln2tb-anime-delete-single

elif [ "$answer" = "2- Multiple Anime" ]
then c.ln2tb-anime-delete-batch

elif [ "$answer" = "3- Delete Episodes" ]
then c.ln2tb-anime-delete-episodes

fi




;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-delete-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


start=$(dialog --stdout --help-button --help-label "Cancel" --yesno \
"Did you add the Anime names to $BATCH_FILE_TV_ADD_DELETE ?" 10 50 )

case $? in 
0)
if [ -f $BATCH_FILE_TV_ADD_DELETE ]
then


while read -r line ; do du -hs "$TV_SYM2"/"$line" ; done < $BATCH_FILE_TV_ADD_DELETE


echo -e "${RED}Do you want to remove these Folders?		y ${WHITE}"

read confirmation

if [ "$confirmation" = "y" ]
then 

while read -r line ; do \
sudo rm -rv "$TV_SYM2"/"$line" ; \
echo -e "${YELLOW}" ; \
sed -n "/\"$line\"/p" /usr/local/bin/move ; \
echo -e "${RED}" ; \
sudo sed -i "/\"$line\"/d" /usr/local/bin/move ; \
sudo sed -i "/\"$line\"/d" /usr/local/bin/move1 ; \
echo -e "${CYAN} Dont forget SickBeard" ; \
echo -e "${WHITE}" ; \
done < $BATCH_FILE_TV_ADD_DELETE


else _CANCEL_MSG
fi


else 
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-anime-delete-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-anime-delete-batch
;;
2)
_CANCEL_MSG ;; 
esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-delete-episodes"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout --backtitle "Make Your Selection with the SPACE button" --title "Choose The Anime" --dselect \
"$TV_SYM2"/ 14 60 )

case $? in 
0)
name2=$(echo $name| rev | cut -d/ -f1 | rev )


du -hs "$TV_SYM2"/"$name2"



echo -e "${RED}Do you want to remove Episodes in this Folder?		y ${WHITE}"
read confirmation
if [ "$confirmation" = "y" ]
then 

sudo rm -rv $TV_SYM2/"$name2"/"$name2"* ; \
sudo rm -rv $TV_SYM2/"$name2"/*.{avi,mkv,mp4,ts,vob,AVI,MKV,MP4,TS,VOB} ; \

else _CANCEL_MSG
fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-delete-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout --backtitle "Make Your Selection with the SPACE button" --title \
"Choose The Anime with the SPACE button" --dselect "$TV_SYM2"/ 14 50 ) 


case $? in 
0)
name2=$(echo $name| rev | cut -d/ -f1 | rev )

du -hs "$TV_SYM2"/"$name2"


echo -e "${RED}Do you want to remove this Folder?	y ${WHITE}"
read confirmation
if [ "$confirmation" = "y" ]
then 
sudo rm -rv "$TV_SYM2"/"$name2" ; \
echo -e "${YELLOW}" ; \
sed -n "/\"$name2\"/p" /usr/local/bin/move ; \
echo -e "${RED}" ; \
sudo sed -i "/\"$name2\"/d" /usr/local/bin/move ; \
sudo sed -i "/\"$name2\"/d" /usr/local/bin/move1 ; \
echo -e "${CYAN} Dont forget SickBeard" ; echo -e "${WHITE}"

else _CANCEL_MSG 
fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-find"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --menu \
"Choose the command You Wish to Execute (Find)" 14 50 50 \
"1- Single Anime" "" \
"2- Multiple Anime" ""  )

case $? in
0)

if [ "$answer" = "1- Single Anime" ]
then c.ln2tb-anime-find-single

elif [ "$answer" = "2- Multiple Anime" ]
then c.ln2tb-anime-find-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac







#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-find-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



start=$(dialog --stdout  --clear --help-button --help-label "Cancel" --yesno \
"Did you add the Anime names to $BATCH_FILE_TV_FIND ?" 10 50 )

case $? in
0)
if [ -f $BATCH_FILE_TV_FIND ]
then

echo -e "${RED}\n-----------################-------------\n${COLOR_OFF}" 

cat $BATCH_FILE_TV_FIND | while read -r LINE ; do ls -1d "$TV_SYM2"/* | grep -i "$LINE" ; done |sort -bf

echo -e "${RED}\n-----------################-------------\n${COLOR_OFF}"



else
sudo nano $BATCH_FILE_TV_FIND ; c.ln2tb-anime-find-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_FIND ; c.ln2tb-anime-find-batch
;;
2)
_CANCEL_MSG ;; 
esac

#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-anime-find-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox \
"Please Enter the name of the Anime" 10 50 )

case $? in
0)

clear


echo -e "${YELLOW}\n-----------################-------------\n${COLOR_OFF}"

ls -1 "$TV_SYM2" | grep -i "$name" | sort -bf

echo -e "${YELLOW}\n-----------################-------------\n\n${COLOR_OFF}"



;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac







#!/bin/bash
# Checksum all media files
SCRIPT_NAME="c.ln2tb-checksum"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


# Run <script_name> -c to check if the script is running
if [[ "$1" = "-c"* ]] ;then _LOCK_CHECK ; fi

# Time Calculation
_START_TIME

# Start Lock
_LOCK_ON

# Start Progress indicator
#_PROGRESS

#########################################################

TMP="$(mktemp)"
TMP2="$(mktemp)"
export count_file="$(mktemp)"

echo 1 > "$count_file"



echo -e "\nSearching for Movie files to checksum"
echo ""


_CHECK_MOUNT1 && \
find "$MOVIE_SYM"/ -size +25M -exec /usr/local/bin/c.ln2tb-checksum-find {} \;



echo ""
echo "################################"
echo "################################"
echo "################################"
echo ""

echo -e "\nSearching for TV files to checksum"
echo ""

# Reset the count for the TV files
echo 1 > "$count_file"

_CHECK_MOUNT1 && \
find "$TV_SYM"/ -size +25M -exec /usr/local/bin/c.ln2tb-checksum-find {} \;






COLOR_OFF

#########################################################

# Time Calculation
_END_TIME

# End Lock
_LOCK_OFF
#!/bin/bash
# Checksum all media files ("find"s function companion)
SCRIPT_NAME="c.ln2tb-checksum-find"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


#########################################################

count="$(cat $count_file)"


i="$1"

if [ ! -f "$i".md5 ]
then
	CYAN
	echo "$count) Checking:"
	echo "$i"

	MD5="$(md5sum "$i"|awk '{print $1}')"
	NAME="$(basename "$i")"
	echo "$MD5  $NAME" > "$i".md5
	echo $((count + 1)) > "$count_file"
else
	if [ "$(stat -c %s "$i".md5)" -lt 30 ]
	then
		rm "$i".md5
		RED
		echo "Removing empty or corrupt md5 file:"
		echo "$i.md5"
		YELLOW
		echo "$count) Re-Checking:"
		echo "$i"

		MD5="$(md5sum "$i"|awk '{print $1}')"
		NAME="$(basename "$i")"
		echo "$MD5  $NAME" > "$i".md5
		echo $((count + 1)) > "$count_file"

	else
		GREEN
		echo "$count) Skipping:"
		echo "$i.md5 exists"
		echo $((count + 1)) > "$count_file"

	fi
fi


COLOR_OFF
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-delete"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute" 14 50 50 \
"1- Delete Show" "" \
"2- Delete Movie" "" \
"3- Delete Anime" "" )


case $? in
0)

if [ "$answer" = "1- Delete Show" ]
then c.ln2tb-tv-delete

elif [ "$answer" = "2- Delete Movie" ]
then c.ln2tb-movie-delete

elif [ "$answer" = "3- Delete Anime" ]
then c.ln2tb-anime-delete

fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac


#!/bin/bash
# A script for finding Duplicates in Media
SCRIPT_NAME="c.ln2tb-dupes"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT

clear
###################################################################
###################################################################
WHITE
echo ""
echo "#############################################################"
echo "		$TV_SYM"
echo "#############################################################"
###################################################################
###################################################################

TMP="$(mktemp)"
TMP_LOG="$(mktemp)"


mysql -uroot -p"$DB_PASSWORD" tv -e "select Name from tv"  -ss > $TMP

cat $TMP | cut -d"]" -f1| uniq -id > "$DUPES_BUFFER"

while read -r FILE  ; do dupes_array+=("$FILE") ;done < "$DUPES_BUFFER"

for i in "${dupes_array[@]}"
do
DIR="$(echo $i | cut -d/ -f1)"
NAME="$(echo $i | cut -d/ -f2)"
NAME2="$(echo $i | cut -d/ -f2 | sed s/'/\\\\\\'/ )"

CYAN ; echo "Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF

RED
find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec du -hs {} \; -exec echo "" \; | tee -a $TMP_LOG

echo "" | tee -a $TMP_LOG
CYAN ; echo "Actions on Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF

find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec echo -e "${GREEN}" \; -exec du -hs {} \; -exec echo -e "${COLOR_OFF}" \; -exec sudo rm -i {} \; -exec echo "" \; | tee -a $TMP_LOG
echo ""

echo "Delete the Database Entry ($i) ?   y"
read confirmation
if [ "$confirmation" = "y" ]
then
mysql -uroot -p"$DB_PASSWORD" tv -e "DELETE from tv where name like '%$NAME2%' " -ss ; echo "Deleted $i from the database"
else
GREEN
echo "		Not deleting the entry & continuing the search"
COLOR_OFF
fi

done







echo "


Logfile:  $TMP_LOG

"

####################################################################
####################################################################
#WHITE
#echo ""
#echo "#############################################################"
#echo "		$MOVIE_SYM"
#echo "#############################################################"
####################################################################
####################################################################

#TMP="$(mktemp)"
#TMP_LOG="$(mktemp)"

#CYAN ; echo "Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF


#mysql -uroot -p"$DB_PASSWORD" tv -e "select Name from tv"  -ss > $TMP

#cat $TMP | cut -d"]" -f1| uniq -id > "$DUPES_BUFFER"

#while read -r FILE  ; do dupes_array+=("$FILE") ;done < "$DUPES_BUFFER"

#for i in "${dupes_array[@]}"
#do
#DIR="$(echo $i | cut -d/ -f1)"
#NAME="$(echo $i | cut -d/ -f2)"

#RED
#find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec du -hs {} \; -exec echo "" \; | tee -a $TMP_LOG

#echo "" | tee -a $TMP_LOG
#CYAN ; echo "Actions on Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF

#find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec du -hs {} \; -exec sudo rm -i {} \; | tee -a $TMP_LOG
#echo ""
#done





#echo "


#Logfile:  $TMP_LOG

#"


####################################################################
####################################################################
#WHITE
#echo ""
#echo "#############################################################"
#echo "		$TV_SYM2"
#echo "#############################################################"
####################################################################
####################################################################

#TMP="$(mktemp)"
#TMP_LOG="$(mktemp)"

#CYAN ; echo "Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF


#mysql -uroot -p"$DB_PASSWORD" tv -e "select Name from tv"  -ss > $TMP

#cat $TMP | cut -d"]" -f1| uniq -id > "$DUPES_BUFFER"

#while read -r FILE  ; do dupes_array+=("$FILE") ;done < "$DUPES_BUFFER"

#for i in "${dupes_array[@]}"
#do
#DIR="$(echo $i | cut -d/ -f1)"
#NAME="$(echo $i | cut -d/ -f2)"

#RED
#find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec du -hs {} \; -exec echo "" \; | tee -a $TMP_LOG

#echo "" | tee -a $TMP_LOG
#CYAN ; echo "Actions on Duplicates:" | tee -a $TMP_LOG ; COLOR_OFF

#find  "$TV_SYM"/"$DIR"/ -size +25M -type f -iname "$NAME*" -exec du -hs {} \; -exec sudo rm -i {} \; | tee -a $TMP_LOG
#echo ""
#done







#echo "


#Logfile:  $TMP_LOG

#"


echo ""
echo ""
echo "Finished searching for Duplicates"
echo ""
echo ""

echo "Delete the TV database ?     y" 
read confirmation

if [ "$confirmation" = "y" ]
then
mysql -uroot -p"$DB_PASSWORD" tv -e "DELETE from tv" -ss ; echo "Deleted the TV database (Re-populate it using c.ln2tb-tv-find-popdb)"
else
echo exiting
fi

#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-find"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute" 14 50 50 \
"1- Find Movie" "" \
"2- Find Show" "" \
"3- Find Anime" "" )

case $? in
0)

if [ "$answer" = "1- Find Movie" ]
then c.ln2tb-movie-find


elif [ "$answer" = "2- Find Show" ]
then c.ln2tb-tv-find


elif [ "$answer" = "3- Find Anime" ]
then c.ln2tb-anime-find


fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac


#!/bin/bash
# Check to see if an HDD is mounted
SCRIPT_NAME="c.ln2tb-mount"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


# Start Lock
_LOCK_ON


export DISPLAY=:0.0



[ -z "$NEEDS_MOUNT" ] && GREEN ; echo -e "\n\n\n   Nothing to Mount"




if [ "$NEEDS_MOUNT" = "$NAS1_MOUNT_POINT" ]
then
	Answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --colors --menu \
	"Choose the command You Wish to Execute" 14 70 20 \
	"Mount $NAS1_MOUNT_POINT" "-- $MOUNTS_1" )

	if [ "$Answer" = "Mount $NAS1_MOUNT_POINT" ]
	then
	sudo mount $NAS1_MOUNT_POINT && sudo mount -R "$NAS1_MOUNT_POINT" "$MOUNT_ANCHOR" && \
	echo -e "\n\n\n\n\nMounted $NAS1_MOUNT_POINT" && sleep 2

	else
	_CANCEL_MSG
	fi
fi





if [ "$NEEDS_MOUNT" = "$NAS2_MOUNT_POINT" ]
then
	Answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --colors --menu \
	"Choose the command You Wish to Execute" 14 70 20 \
	"Mount $NAS2_MOUNT_POINT" "-- $MOUNTS_2" )

	if [ "$Answer" = "Mount $NAS2_MOUNT_POINT" ]
	then
	sudo mount $NAS2_MOUNT_POINT && \
	echo -e "\n\n\n\n\nMounted $NAS2_MOUNT_POINT" && sleep 2

	else
	_CANCEL_MSG
	fi
fi





if [ "$NEEDS_MOUNT" = "$NAS3_MOUNT_POINT" ]
then
	Answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --colors --menu \
	"Choose the command You Wish to Execute" 14 70 20 \
	"Mount $NAS3_MOUNT_POINT" "-- $MOUNTS_3" )

	if [ "$Answer" = "Mount $NAS3_MOUNT_POINT" ]
	then
	sudo mount $NAS3_MOUNT_POINT && \
	echo -e "\n\n\n\n\nMounted $NAS3_MOUNT_POINT" && sleep 2

	else
	_CANCEL_MSG
	fi
fi





if [ "$NEEDS_MOUNT" = "$NAS4_MOUNT_POINT" ]
then
	Answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --colors --menu \
	"Choose the command You Wish to Execute" 14 70 20 \
	"Mount $NAS4_MOUNT_POINT" "-- $MOUNTS_4" )

	if [ "$Answer" = "Mount $NAS4_MOUNT_POINT" ]
	then
	sudo mount $NAS4_MOUNT_POINT && \
	echo -e "\n\n\n\n\nMounted $NAS4_MOUNT_POINT" && sleep 2

	else
	_CANCEL_MSG
	fi
fi



# End Lock
_LOCK_OFF
#!/bin/bash
# Check to see if an HDD is unmounted
SCRIPT_NAME="c.ln2tb-mount-check"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



# Start Lock
_LOCK_ON


export DISPLAY=:0.0


RUN_TIMES="0"


while [[ $RUN_TIMES < 2 ]] ;do


	if [ "$NAS_COUNT" -lt 1 ] ; then 
	COLOR_OFF
	echo -e "\n\n$NAS1_MOUNT_POINT: Less than 1 Server Count Specified in VAR-SCRIPT (Not Checking)" 
	else
	export NASx_IP="$NAS1_IP"
	export NASx_MOUNT_POINT="$NAS1_MOUNT_POINT"
	/usr/local/bin/c.ln2tb-mount-check-1
	fi
	
	if [ "$NAS_COUNT" -lt 2 ] ; then 
	COLOR_OFF
	echo -e "\n\n$NAS2_MOUNT_POINT: Less than 2 Server Count Specified in VAR-SCRIPT (Not Checking)" 
	else
	export NASx_IP="$NAS2_IP"
	export NASx_MOUNT_POINT="$NAS2_MOUNT_POINT"
	/usr/local/bin/c.ln2tb-mount-check-1
	fi

	if [ "$NAS_COUNT" -lt 3 ] ; then 
	COLOR_OFF
	echo -e "\n\n$NAS3_MOUNT_POINT: Less than 3 Server Count Specified in VAR-SCRIPT (Not Checking)" 
	else
	export NASx_IP="$NAS3_IP"
	export NASx_MOUNT_POINT="$NAS3_MOUNT_POINT"
	/usr/local/bin/c.ln2tb-mount-check-1
	fi
	
	if [ "$NAS_COUNT" -lt 4 ] ; then 
	COLOR_OFF
	echo -e "\n\n$NAS4_MOUNT_POINT: Less than 4 Server Count Specified in VAR-SCRIPT (Not Checking)" 
	else
	export NASx_IP="$NAS4_IP"
	export NASx_MOUNT_POINT="$NAS4_MOUNT_POINT"
	/usr/local/bin/c.ln2tb-mount-check-1
	fi
	
	


	RUN_TIMES=$((RUN_TIMES+1))

done



# End Lock
_LOCK_OFF
#!/bin/bash
# Check to see if an HDD is unmounted
SCRIPT_NAME="c.ln2tb-mount-check-1"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


#trap "_LOCK_OFF ; exit" INT TERM

# Start Lock
_LOCK_ON


export DISPLAY=:0.0




###################################################################
###################################################################
WHITE
echo ""
echo "#############################################################"
echo "			$NASx_MOUNT_POINT"
echo "#############################################################"
###################################################################
###################################################################

CONTINUE="YES"

# Ping NASx
ping -c 5 "$NASx_IP" >/dev/null


	if [ "$?" = 0 ]
	then
		GREEN ; echo "$NASx_IP Reachable"
	else
		RED ; echo "$NASx_IP Not Reachable"

	    echo "$(date) - Warning! $NASx_IP Not Reachable" | tee "$MYHOME"/script-error-"$SCRIPT_NAME"
	    beep 2>/dev/null
			
	fi





# Check if NASx is mounted
_Check_NAS() {
    grep -qs "$NASx_MOUNT_POINT" /proc/mounts >/dev/null
	if [ "$?" = 0 ]
	then	GREEN ; echo "$NASx_MOUNT_POINT Mounted"
	else	RED ; echo "$NASx_MOUNT_POINT Not Mounted"
	
	CONTINUE="NO"
	export NEEDS_MOUNT="$NASx_MOUNT_POINT"
	/usr/bin/terminator -x /usr/local/bin/c.ln2tb-mount  2>/dev/null
	_Check_NAS
	exit
	fi
	
}


_Check_NAS

if [ "$CONTINUE" = YES ]
then


	# Check if NASx is really alive
	[ ! -z "$NAS_ALIVE_CHECK" ] && [ -f "$NASx_MOUNT_POINT"/"$NAS_ALIVE_CHECK" ]
	
	if [ "$?" = 0 ]
	then
	
	CHECK="$(cat $NASx_MOUNT_POINT/$NAS_ALIVE_CHECK)"
	
	[ -r $NASx_MOUNT_POINT/$NAS_ALIVE_CHECK ] 2>/dev/null && [ $CHECK = 0 ] 2>/dev/null


		if [ "$?" = 0 ]
		then 
			GREEN ; echo "$NASx_MOUNT_POINT Appears to be Alive & Kicking"
		else
			RED ; echo "$NASx_MOUNT_POINT Appears to be Ghost Mounted (Not Really alive)"
				  echo "Check if ($NAS_ALIVE_CHECK) file exists"
		fi
		
		else
			RED ; echo "$NASx_MOUNT_POINT Appears to be Ghost Mounted (Not Really alive)"
				  echo "Check if ($NAS_ALIVE_CHECK) file exists"

	fi
		
fi


if [ -z "$NEEDS_MOUNT" ]
then
	# No need for a second run if everything was mounted
	echo -e "\n\nEverything's good"
else
	unset NEEDS_MOUNT
	clear
	RED
	echo "$(date) - Something went wrong with Mounting or reaching $NASx_MOUNT_POINT" | tee "$MYHOME"/script-error-"$SCRIPT_NAME"
	beep 2>/dev/null ; sleep .1 ; beep 2>/dev/null ; sleep .1 ; beep 2>/dev/null ; sleep .5 ; beep 2>/dev/null


fi





# End Lock
_LOCK_OFF
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-movie-delete"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute (Delete)" 14 50 50 \
"1- Single Movie" "" \
"2- Multiple Movies" "" )

case $? in
0)

if [ "$answer" = "1- Single Movie" ]
then c.ln2tb-movie-delete-single

elif [ "$answer" = "2- Multiple Movies" ]
then c.ln2tb-movie-delete-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# Delete Movies
SCRIPT_NAME="c.ln2tb-movie-delete-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


start=$(dialog --stdout  --help-button --help-label "Cancel" --yesno \
"Did you add the Show names to $BATCH_FILE_MOVIE_ADD_DELETE ?" 10 50 )

case $? in 
0)
if [ -f $BATCH_FILE_MOVIE_ADD_DELETE ]
then



while read -r line ; do du -hs $MOVIE_SYM/"$line" ; done < $BATCH_FILE_MOVIE_ADD_DELETE


echo -e "${RED}Do you want to remove these Folders?		y ${WHITE}"

read confirmation

if [ "$confirmation" = "y" ]
then 

while read -r line ; do sudo rm -rv $MOVIE_SYM/"$line" ; done < $BATCH_FILE_MOVIE_ADD_DELETE


else _CANCEL_MSG
fi


else 
sudo nano $BATCH_FILE_MOVIE_ADD_DELETE ; c.ln2tb-movie-delete-batch

fi
;;
1)
sudo nano $BATCH_FILE_MOVIE_ADD_DELETE ; c.ln2tb-movie-delete-batch
;;
2)
_CANCEL_MSG ;; 
esac
#!/bin/bash
# Delete Movies
SCRIPT_NAME="c.ln2tb-movie-delete-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout --backtitle "Make Your Selection with the SPACE button" \
--title "Choose The Movie" --dselect \
"$MOVIE_SYM"/ 14 60 )


case $? in
0)

du -hs "$name"

echo -e "${RED}Do you want to remove this Folder?		y ${WHITE}"
read confirmation

if [ "$confirmation" = "y" ]
then

sudo rm -rv "$name"

else

_CANCEL_MSG

fi



;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-movie-find"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --menu \
"Choose the command You Wish to Execute (Find)" 14 50 50 \
"1- Single Movie" "" \
"2- Multiple Movies" "" )

case $? in
0)

if [ "$answer" = "1- Single Movie" ]
then c.ln2tb-movie-find-single

elif [ "$answer" = "2- Multiple Movies" ]
then c.ln2tb-movie-find-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-movie-find-batch"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


# Time Calculation
_START_TIME

TMP1="$(mktemp)"
TMP2="$(mktemp)"
TMP3="$(mktemp)"
TMP_LOG1="$(mktemp)"

start=$(dialog --stdout  --clear --help-button --help-label "Cancel" --yesno \
"Did you add the Movie names to $BATCH_FILE_MOVIE_FIND ?" 10 50 )

case $? in
0)
if [ -f "$BATCH_FILE_MOVIE_FIND" ]
then

while read -r FILE_NAME
do
export SCRIPT_LAUNCH="Y" ;/usr/local/bin/c.ln2tb-movie-find-single "$FILE_NAME"
done < "$BATCH_FILE_MOVIE_FIND"


#################################
#################################


while read -r i ;do 
MOVIE_NAME="$(echo $i | sed "s/(//g;s/)//g;s/'/\\\\\\'/g;s/^[ \t]*//;s/[ \t]*$//;s/?//g;s/://g")"
mysql -uroot -p"$DB_PASSWORD" movies -e "select Name from movies where Name LIKE '%$MOVIE_NAME%'" -ss >> "$TMP1" ; done < "$BATCH_FILE_MOVIE_FIND"

while read -r FILE2 ; do movie_array+=("$FILE2") ; done < "$TMP1"







		
#################################
echo -e "${YELLOW}\n-----------################-------------\n${COLOR_OFF}" 

for i in "${movie_array[@]}"
do
MOVIE_NAME="$(echo $i | sed "s/(//g;s/)//g;s/'/\\\\\\'/g;s/^[ \t]*//;s/[ \t]*$//")"
NAME="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Name from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
WATCHED="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Watched from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
if [ "$WATCHED" = "YES" ] ; then WATCHED="${PURPLE}(YES)";else WATCHED="${RED}(NO)";fi
echo -e "${WHITE}$NAME${COLOR_OFF} $WATCHED"
done

echo -e "${YELLOW}\n-----------################-------------\n${COLOR_OFF}" 

#################################


####### For the log file#########
if [[ "$WATCHED" = *"YES" ]] ; then WATCHED="(YES)";else WATCHED="(NO)";fi
echo -e "
Path: $i
Name:  $NAME
Size:  $SIZE
Res: $RES1 x "$RES2"p  $DEF
Watched: $WATCHED
-----------################-------------
" >> "$TMP_LOG1"
####### For the log file#########







echo "Log File:   sudo geany $TMP_LOG1"


# Time Calculation
_END_TIME


else
sudo nano $BATCH_FILE_MOVIE_FIND ; c.ln2tb-movie-find-batch

fi

exit 0

;;
1)
sudo nano $BATCH_FILE_MOVIE_FIND ; c.ln2tb-movie-find-batch
;;
2)
_CANCEL_MSG ;; 
esac
#!/bin/bash
# Populate my DB of Movies
SCRIPT_NAME="c.ln2tb-movie-find-popdb"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


# Run <script_name> -c to check if the script is running
if [[ "$1" = "-c"* ]] ;then _LOCK_CHECK ; fi

# Time Calculation
_START_TIME

# Start Lock
_LOCK_ON

#########################################################

export count_file="$(mktemp)"

echo 1 > "$count_file"


echo "Searching for Movie files"
echo ""

_CHECK_MOUNT1 && \
find "$MOVIE_SYM"/ -size +200M -exec /usr/local/bin/c.ln2tb-movie-find-popdb-helper {} \;


#########################################################


####################################################
# Movie folders
####################################################
TMP="$(mktemp)"
TMP2="$(mktemp)"
TMP_LOG1="$(mktemp)"


_CHECK_MOUNT1 && \
cd "$MOVIE_SYM" && find . -maxdepth 1 | sort -bf | tail -n +2 |cut -b3- > $TMP

while read -r FILE  ; do movie_folder_array+=("$FILE") ;done < $TMP

for i in "${movie_folder_array[@]}"
do
NAME="$i"

mysql -uroot -p"$DB_PASSWORD" movie_folders << EOF
INSERT INTO folders (Movie_Folder) 
VALUES ("$NAME")
EOF

echo "Adding Folder: $NAME"
done

echo -e "$count)${COLOR_OFF} Adding Folder: $NAME"
echo $((count + 1)) > "$count_file"

#########################################################

# Time Calculation
_END_TIME

# End Lock
_LOCK_OFF
#!/bin/bash
# Populate my DB of Movies
SCRIPT_NAME="c.ln2tb-movie-find-popdb"

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


count="$(cat $count_file)"

TMP="$(mktemp)"
TMP2="$(mktemp)"
TMP_LOG1="$(mktemp)"

RES1=$(ffprobe -v quiet -show_streams "$1" | egrep -e 'width' |sed 's/width=//g' | sed 's/N\/A//g' | sed '/^\s*$/d' | head -n1)
RES2=$(ffprobe -v quiet -show_streams "$1" | egrep -e 'height' |sed 's/height=//g' | sed 's/N\/A//g' | sed '/^\s*$/d' | head -n1)

if [ -z "$RES1" -o -z "$RES2"  ]; then RES1="0" && RES2="0" ; fi

DEF="$( [ "$RES1" -lt 1000 ] && [ "$RES2" -lt 700 ] && echo "[SD]")"
NAME="$(basename "$( echo $1 | rev |cut -b 5- | rev | sed 's/(//g;s/)//g' )")"
NOTES="$(cat "$(echo $1 | rev |cut -b 5- | rev )"-NOTES.txt 2>/dev/null)" 2>/dev/null
DATE="$(stat "$1" | grep Modify | awk '{print $2}')"
SIZE="$(du -m "$1" | awk '{print $1}')"
SUB="$( echo $1 | rev |cut -b 5- | rev )"
BITRATE="$( grep "bit rate" "$1".log |cut -d: -f2 )"
DURATION="$( grep "Duration" "$1".log |cut -d: -f2 )"
NFO="$( echo $1 | rev |cut -b 5- | rev )".nfo
[ -f "$NFO" ] && PLAY_COUNT="$(grep playcount "$NFO" | sed 's/<playcount>//;s/<\/playcount>//;s/ //g' | head -n1)" 2>/dev/null


SUBTITILE="NO"
if find "$SUB"*.srt -exec echo -n \; ; then SUBTITILE="YES" ; fi 2>/dev/null
if find "$SUB"*.sub -exec echo -n \; ; then SUBTITILE="YES" ; fi 2>/dev/null


if [ -f "$NFO" ]
then
	if [ "$PLAY_COUNT" -gt "0" ] ; then WATCHED="YES" ; else WATCHED="NO" ; fi
else
	WATCHED="(N/A): No NFO file"
fi

mysql -uroot -p"$DB_PASSWORD" movies << EOF
INSERT INTO movies (Name, Size_MB, ResWidth, ResHeight, Watched, Notes, Definition, Date, Subtitle, Bitrate, Duration) 
VALUES ("$NAME", "$SIZE", "$RES1", "$RES2", "$WATCHED", "$NOTES", "$DEF", "$DATE", "$SUBTITLE", "$BITRATE", "$DURATION")
ON DUPLICATE KEY UPDATE 
    Size_MB = "$SIZE",
    ResWidth = "$RES1",
    ResHeight = "$RES2",
    Watched = "$WATCHED",
    Notes = "$NOTES",
    Definition = "$DEF",
    Date = "$DATE",
    Subtitle = "$SUBTITILE",
    Bitrate = "$BITRATE",
    Duration = "$DURATION";
EOF

GREEN
echo -ne "$count) ${CYAN}Adding File: ${COLOR_OFF}$NAME"
echo $((count + 1)) > "$count_file"
#!/bin/bash
# (do stuff to query the movies db) (Work in Progress)
SCRIPT_NAME="c.ln2tb-movie-find-popdb-multi"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


answer=$(dialog --stdout  --menu \
"Choose the command You Wish to Execute" 15 50 50 \
"1- find SD files" "" \
"2- sort files by size" "" \
"3- ss" "" \
"4- " "" \
"5- " "" \
"6- " "" \
"7- " "" )



case $? in
0)

if [ "$answer" = "1- Add" ]
then 


elif [ "$answer" = "2- Delete" ]
then 






fi

;;
1)
_CANCEL_MSG ;; 
esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-movie-find-single"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


# Time Calculation
_START_TIME

TMP="$(mktemp)"
TMP2="$(mktemp)"
TMP_LOG1="$(mktemp)"


if [ -n "$TERM_LAUNCH" ]
then FILE_NAME="$(xclip -o)"
elif [ -n "$SCRIPT_LAUNCH" ]
then FILE_NAME="$1"
else
FILE_NAME=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox \
"Please Enter the name of the Movie" 10 50 )
fi



case $? in
0)

# To remove whitespaces from the beginning & the end
FILE_NAME="$(echo $FILE_NAME | sed "s/^[ \t]*//;s/[ \t]*$//")"


# To get a filename suitable for mysql (no '(' , or ')' , or ' ' ' , or whtespace and convert '&' to '%'  and no " ? " or " : ")
MOVIE_NAME="$(echo $FILE_NAME | sed "s/(//g;s/)//g;s/'/\\\\\\'/g;s/^[ \t]*//;s/[ \t]*$//;s/&/%/g;s/?//g;s/://g")"

mysql -uroot -p"$DB_PASSWORD" movies -e "select Name from movies where Name LIKE '%$MOVIE_NAME%'" -ss > $TMP

while read -r FILE2 ; do movie_array+=("$FILE2") ; done < $TMP






for i in "${movie_array[@]}"
do

#################################
MOVIE_NAME="$(echo $i | sed "s/(//g;s/)//g;s/'/\\\\\\'/g;s/^[ \t]*//;s/[ \t]*$//")"
NAME="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Name from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
SIZE="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Size_MB from movies where Name LIKE '%$MOVIE_NAME%'" -ss) MB"
RES1="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select ResWidth from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
RES2="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select ResHeight from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
BITRATE="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Bitrate from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
DURATION="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Duration from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
DEF="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Definition from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
NOTES="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Notes from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
DATE="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Date from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
WATCHED="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Watched from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
if [ "$WATCHED" = "YES" ] ; then WATCHED="${PURPLE}(YES)";else WATCHED="${RED}(NO)";fi
#################################

GREEN
echo -ne "Name:	 ${WHITE}$NAME${COLOR_OFF}"
GREEN
echo -ne "Size:	 ${WHITE}$SIZE${COLOR_OFF}"
GREEN
echo -ne "Res:	 ${WHITE}"$RES1 x $RES2"p ${COLOR_OFF}${PURPLE}  "$DEF" ${COLOR_OFF}"
GREEN
echo -ne "Rate:	${WHITE}"$BITRATE" ${COLOR_OFF}"
GREEN
echo -ne "Time:	${WHITE}"$DURATION" ${COLOR_OFF}"
GREEN
echo -ne "Added:	 ${WHITE}"$DATE" ${COLOR_OFF}"
GREEN
echo -ne "Watched: ${WHITE}$WATCHED"
GREEN
echo -ne "Notes:	 ${CYAN}$NOTES"
YELLOW




####### For the log file#########
if [[ "$WATCHED" = *"YES" ]] ; then WATCHED="(YES)";else WATCHED="(NO)";fi
echo -e "
Path: $i
Name:  $NAME
Size:  $SIZE
Res: $RES1 x "$RES2"p  $DEF
Bitrate: $BITRATE
Time: $DURATION
Watched: $WATCHED
-----------################-------------
" >> "$TMP_LOG1"
####### For the log file#########

done



#---#
if [ -n "$TERM_LAUNCH" ]
then 
echo "------------------------------------------------"
echo ""
fi


if [ -n "$SCRIPT_LAUNCH" ]
then echo -n
else

#################################
for i in "${movie_array[@]}"
do
MOVIE_NAME="$(echo $i | sed "s/(//g;s/)//g;s/'/\\\\\\'/g;s/^[ \t]*//;s/[ \t]*$//")"
NAME="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Name from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
WATCHED="$(mysql -uroot -p"$DB_PASSWORD" movies -e "select Watched from movies where Name LIKE '%$MOVIE_NAME%'" -ss)"
if [ "$WATCHED" = "YES" ] ; then WATCHED="${PURPLE}(YES)";else WATCHED="${RED}(NO)";fi
echo -e "${WHITE}$NAME${COLOR_OFF} $WATCHED"
done

#################################

if [ -n "$TERM_LAUNCH" ]
then
YELLOW
echo "------------------------------------------------"
fi


#echo "Log File:   sudo geany $TMP_LOG1"

COLOR_OFF


# Time Calculation
_END_TIME

fi



if [ -n "$TERM_LAUNCH" ]
then sleep 10000
fi
;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-add"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT




answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute (ADD)" 14 50 50 \
"1- Single Show" "" \
"2- Multiple Shows" ""  )


case $? in
0)

if [ "$answer" = "1- Single Show" ]
then c.ln2tb-tv-add-single

elif [ "$answer" = "2- Multiple Shows" ]
then c.ln2tb-tv-add-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac

#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-add-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT




start=$(dialog --stdout  --help-button --help-label "Cancel" --yesno \
"Did you add the Show names to $BATCH_FILE_TV_ADD_DELETE " 14 50 )

case $? in
0)
if [ -f $BATCH_FILE_TV_ADD_DELETE ]
then

cat $BATCH_FILE_TV_ADD_DELETE | while read -r LINE ; \

do 

if [ -d "$TV_SYM"/"$LINE" ]
then RED
else GREEN
fi

mkdir -v "$TV_SYM"/"$LINE"
sudo chmod 777 "$TV_SYM"/"$LINE"

done

# The sed expressions here are special to this file only, for general use sed's , go to c.ln2tb-tv-add
cat $BATCH_FILE_TV_ADD_DELETE | while read -r name ; do echo $name | sed 's/ /\\\\\\ /g' | sed "s/'//g" | sed "s/(/\\\\\\\(/g" | sed "s/)/\\\\\\\)/g" | sed 's/&/\\\\\\&/g' | sed 's/;/\\\\\\;/g' | sed 's/://g' | awk '{print $0 "\\\\\\ -\\\\\\ \\\\\\[*"}' ; done > $BATCH_FILE_TV_ADD_DELETE2

while read name3 name2 ; do 
sudo echo "if ls -U | grep -E '"$name3"' >/dev/null 2>&1 ; then mv -v "$name3" \""\$TV_SYM"\"/\""$name2"\"/              2>/dev/null ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move; done < <(paste $BATCH_FILE_TV_ADD_DELETE2 $BATCH_FILE_TV_ADD_DELETE)

while read name3 name2 ; do 
sudo echo "if ls -U | grep -E '"$name3"' ; then mv -v "$name3" \""\$TV_SYM"\"/\""$name2"\"/ ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move1; done < <(paste $BATCH_FILE_TV_ADD_DELETE2 $BATCH_FILE_TV_ADD_DELETE)




else
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-tv-add-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-tv-add-batch
;;
2)
_CANCEL_MSG ;; 
esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-add-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --clear --stdout --inputbox \
"Please Enter the name of the Show" 14 50 )

case $? in
0)

echo $name | sed 's/ /\\ /g' | sed "s/'\+//g" | sed "s/(/\\\(/g" | sed "s/)/\\\)/g" | sed 's/&/\\&/g' | sed 's/;/\\;/g'  | sed 's/://g' | awk '{print $0 "\\ -\\ \\[*"}'  > /tmp/pipe
name2=$(tail /tmp/pipe)


name3=$(dialog --extra-button --extra-label "Back" --stdout --clear --inputbox "Is this Correct ?" 10 50 "$name2" )

case $? in
0)

clear
echo -e "\n\n\n"

if [ -d "$TV_SYM"/"$name" ]
then RED
else GREEN
fi

mkdir -v "$TV_SYM"/"$name"
sudo chmod 777 "$TV_SYM"/"$name"

if [ "$?" = 0 ]
then

sudo echo "if ls -U | grep -E '"$name3"' >/dev/null 2>&1 ; then mv -v "$name3" \""\$TV_SYM"\"/\""$name"\"/              2>/dev/null ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move

sudo echo "if ls -U | grep -E '"$name3"' ; then mv -v "$name3" \""\$TV_SYM"\"/\""$name"\"/              ; else false ; fi && echo -e \"\\n\\n\"" >> /usr/local/bin/move1


fi
;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-delete"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute (Delete)" 14 50 50 \
"1- Single Show" "" \
"2- Multiple Shows" "" \
"3- Delete Episodes" ""  )


case $? in
0)

if [ "$answer" = "1- Single Show" ]
then c.ln2tb-tv-delete-single

elif [ "$answer" = "2- Multiple Shows" ]
then c.ln2tb-tv-delete-batch

elif [ "$answer" = "3- Delete Episodes" ]
then c.ln2tb-tv-delete-episodes

fi




;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-delete-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


start=$(dialog --stdout --help-button --help-label "Cancel" --yesno \
"Did you add the Show names to $BATCH_FILE_TV_ADD_DELETE ?" 10 50 )

case $? in 
0)
if [ -f $BATCH_FILE_TV_ADD_DELETE ]
then


while read -r line ; do du -hs "$TV_SYM"/"$line" ; done < $BATCH_FILE_TV_ADD_DELETE


echo -e "${RED}Do you want to remove these Folders?		y ${WHITE}"

read confirmation

if [ "$confirmation" = "y" ]
then 

while read -r line ; do \
sudo rm -rv "$TV_SYM"/"$line" ; \
echo -e "${YELLOW}" ; \
sed -n "/\"$line\"/p" /usr/local/bin/move ; \
echo -e "${RED}" ; \
sudo sed -i "/\"$line\"/d" /usr/local/bin/move ; \
sudo sed -i "/\"$line\"/d" /usr/local/bin/move1 ; \
echo -e "${CYAN} Dont forget SickBeard" ; \
echo -e "${WHITE}" ; \
done < $BATCH_FILE_TV_ADD_DELETE


else _CANCEL_MSG
fi


else 
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-tv-delete-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_ADD_DELETE ; c.ln2tb-tv-delete-batch
;;
2)
_CANCEL_MSG ;;
esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-delete-episodes"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout --backtitle "Make Your Selection with the SPACE button" --title "Choose The Show" --dselect \
"$TV_SYM"/ 14 60 )

case $? in 
0)
name2=$(echo $name| rev | cut -d/ -f1 | rev )


du -hs "$TV_SYM"/"$name2"



echo -e "${RED}Do you want to remove Episodes in this Folder?		y ${WHITE}"
read confirmation
if [ "$confirmation" = "y" ]
then 

sudo rm -rv $TV_SYM/"$name2"/"$name2"* ; \
sudo rm -rv $TV_SYM/"$name2"/*.{avi,mkv,mp4,ts,vob,AVI,MKV,MP4,TS,VOB} ; \

else _CANCEL_MSG
fi
;;

1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-delete-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout  --backtitle "Make Your Selection with the SPACE button" --title \
"Choose The Show with the SPACE button" --dselect "$TV_SYM"/ 14 50 ) 


case $? in 
0)
name2="$(echo $name| rev | cut -d/ -f1 | rev )"

du -hs "$TV_SYM"/"$name2"


echo -e "${RED}Do you want to remove this Folder?	y ${WHITE}"
read confirmation
if [ "$confirmation" = "y" ]
then 
sudo rm -rv "$TV_SYM"/"$name2" ; \
echo -e "${YELLOW}" ; \
sed -n "/\"$name2\"/p" /usr/local/bin/move ; \
echo -e "${RED}" ; \
sudo sed -i "/\"$name2\"/d" /usr/local/bin/move ; \
sudo sed -i "/\"$name2\"/d" /usr/local/bin/move1 ; \
echo -e "${CYAN} Dont forget SickBeard" ; echo -e "${WHITE}"

else _CANCEL_MSG 
fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-find"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --clear --menu \
"Choose the command You Wish to Execute (Find)" 14 50 50 \
"1- Single Show" "" \
"2- Multiple Shows" ""  )

case $? in
0)

if [ "$answer" = "1- Single Show" ]
then c.ln2tb-tv-find-single

elif [ "$answer" = "2- Multiple Shows" ]
then c.ln2tb-tv-find-batch

fi


;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac







#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-find-batch"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



start=$(dialog --stdout  --clear --help-button --help-label "Cancel" --yesno \
"Did you add the Show names to $BATCH_FILE_TV_FIND ?" 10 50 )

case $? in
0)
if [ -f $BATCH_FILE_TV_FIND ]
then

echo -e "${RED}\n-----------################-------------\n${COLOR_OFF}" 

cat $BATCH_FILE_TV_FIND | while read -r LINE ; do ls -1d "$TV_SYM"/* | grep -i "$LINE" ; done |sort -bf

echo -e "${RED}\n-----------################-------------\n${COLOR_OFF}"



else
sudo nano $BATCH_FILE_TV_FIND ; c.ln2tb-tv-find-batch

fi
;;
1)
sudo nano $BATCH_FILE_TV_FIND ; c.ln2tb-tv-find-batch
;;
2)
_CANCEL_MSG ;; 
esac

#!/bin/bash
# Populate my DB of TVs
SCRIPT_NAME="c.ln2tb-tv-find-popdb"
PID=$$

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT

# Run <script_name> -c to check if the script is running
if [[ "$1" = "-c"* ]] ;then _LOCK_CHECK ; fi

# Time Calculation
_START_TIME

# Start Lock
_LOCK_ON

#########################################################

export count_file="$(mktemp)"

echo 1 > "$count_file"


echo "Searching for TV files"
echo ""

_CHECK_MOUNT1 && \
find "$TV_SYM"/ -size +25M -exec /usr/local/bin/c.ln2tb-tv-find-popdb-helper {} \;





####################################################
# TV folders
####################################################
#TMP="$(mktemp)"
#TMP2="$(mktemp)"
#TMP_LOG1="$(mktemp)"


#_CHECK_MOUNT1 && \
#cd "$TV_SYM" && find . -maxdepth 1 | sort -bf | tail -n +2 |cut -b3- > $TMP

#while read -r FILE  ; do TV_folder_array+=("$FILE") ;done < $TMP

#for i in "${TV_folder_array[@]}"
#do
#NAME="$i"

#mysql -uroot -p"$DB_PASSWORD" TV_folders << EOF
#INSERT INTO folders (TV_Folder) 
#VALUES ("$NAME")
#EOF

#echo "Adding Folder: $NAME"
#done


#########################################################

# Time Calculation
_END_TIME

# End Lock
_LOCK_OFF
#!/bin/bash
# Populate my DB of TVs
SCRIPT_NAME="c.ln2tb-tv-find-popdb-helper"

# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT


count="$(cat $count_file)"


DIR="$(echo $( dirname "$( echo $1 )") | rev |cut -d/ -f1 |rev)"
NAME="$(basename "$( echo $1 )")"
SUB="$( echo $1 | rev |cut -b 5- | rev )"
NFO="$( echo $1 | rev |cut -b 5- | rev )".nfo
[ -f "$NFO" ] && PLAY_COUNT="$(grep playcount "$NFO" | sed 's/<playcount>//;s/<\/playcount>//;s/ //g' | head -n1)" 2>/dev/null

SUBTITILE="NO"
if find "$SUB"*.srt -exec echo -n \; ; then SUBTITILE="YES" ; fi 2>/dev/null
if find "$SUB"*.sub -exec echo -n \; ; then SUBTITILE="YES" ; fi 2>/dev/null


if [ -f "$NFO" ]
then
	if [ ! -z "$PLAY_COUNT" ]
	then 
		if [ "$PLAY_COUNT" -gt "0" ] ; then WATCHED="YES" ; else WATCHED="NO" ; fi
	else
		WATCHED="(N/A): Incomplete NFO file"
	fi
else
	WATCHED="(N/A): No NFO file"
fi


mysql -uroot -p"$DB_PASSWORD" tv << EOF
INSERT INTO tv (Name,Size_MB,ResWidth,ResHeight,Watched,Notes,Definition,Date,Subtitle) 
VALUES ("$DIR/$NAME", "-", "-", "-", "$WATCHED", "-", "-", "-", "$SUBTITILE")
ON DUPLICATE KEY UPDATE 
	Name = "$DIR/$NAME",
	Watched = "$WATCHED",
	Subtitle = "$SUBTITILE";	
EOF

GREEN
echo -ne "$count)${CYAN} Adding Episode: ${COLOR_OFF}$DIR/$NAME"
echo $((count + 1)) > "$count_file"
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Find) and do lots of shit to the Media Collection
SCRIPT_NAME="c.ln2tb-tv-find-single"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



name=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox \
"Please Enter the name of the Show" 10 50 )

case $? in
0)

clear


echo -e "${YELLOW}\n-----------################-------------\n${COLOR_OFF}"

ls -1 "$TV_SYM" | grep -i "$name" | sort -bf

echo -e "${YELLOW}\n-----------################-------------\n\n${COLOR_OFF}"



;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac







#!/bin/bash
# cut sections from a video 
SCRIPT_NAME="c.ln2tb-video"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --extra-button --extra-label "Back" --stdout  --menu \
"Choose the command You Wish to Execute" 10 50 50 \
"Join Video" "" \
"Splice Video" "" \
"Convert Video" "" )

case $? in
0)

if [ "$answer" = "Join Video" ]
then c.ln2tb-video-join
fi

if [ "$answer" = "Splice Video" ]
then c.ln2tb-video-splice
fi

if [ "$answer" = "Convert Video" ]
then c.ln2tb-video-convert
fi

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;

esac


#!/bin/bash
#script to convert all video files in the current directory
SCRIPT_NAME="c.ln2tb-video-convert"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT

set -e


DIR=$(dialog --extra-button --extra-label "Back" --stdout  --backtitle "Select the directory containing the files to convert" \
--dselect "/" 10 50 )

cd "$DIR"

extension=$(dialog --extra-button --extra-label "Back" --stdout  --inputbox \
"Type the extension of the files you want to convert e.g: [ avi, MPEG , Mts, mP4 ] (Case sensitive)" \
10 50 )

resolution=$(dialog --extra-button --extra-label "Back" --stdout  --inputbox \
"Type the desired resolution of the files you want to convert e.g: [ hd480 , hd720 , hd1080 ]" \
10 50 )


#concatinate the number of MTS files currently in dir
#AVICOUNT=$(ls | grep avi | tr -d [0-9] | nl | tail -n 1 | cut -b '5-6' )
MTSCOUNT=$(ls | grep $extension | tr -d [0-9] | nl | tail -n 1 | cut -b '5-6' )



##### Track time ##################
timestart=$(echo "$(date +%I:%M)" )
timestop=$(echo "$(date +%I:%M)" )
timestat=$( echo "started $timestart finished $timestop" )
MTSSIZE_TOTAL=$(du -ch *$extension | tr -d [a-z] | tail -n 1 )

echo $timestart

echo "*********************************************************************"
echo "$PWD $MTSDIR contains $MTSCOUNT $extension files totaling $MTSSIZE_TOTAL"

echo "*********************************************************************"

sleep 3

for mtsfiles in *.$extension ; do
echo "n" | ffmpeg -i $mtsfiles -s  $resolution -qscale 0  -ac 2  -tvstd PAL "${mtsfiles%.$extension}.avi"
done

echo $timestop

clear ; echo >&2

AVICOUNT=$(ls | grep avi | tr -d [0-9] | nl | tail -n 1 | cut -b '5-6' )
AVISIZE_TOTAL=$(du -ch *avi | tr -d [a-z] | tail -n 1 )


echo $timestat
echo "*************************************************************"
echo "$AVICOUNT .$extension files down converted to avi totaling $AVISIZE_TOTAL"
echo "*************************************************************"
#!/bin/bash
# join multiple videos into one file
SCRIPT_NAME="c.ln2tb-video-join"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT

set -e



DIR=$(dialog --extra-button --extra-label "Back" --stdout  --clear --backtitle "Choose The Directory that has the files" --dselect \
"/" 10 70 )

name=$(dialog --extra-button --extra-label "Back" --stdout  --clear --backtitle "Choose The First File" --fselect \
"$DIR" 10 200 )

name2=$(dialog --extra-button --extra-label "Back" --stdout  --clear --backtitle "Choose The Second File" --fselect \
"$DIR" 10 200 )

OUTPUT=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the Name of the Combined file" 10 50 "$name" )

case $? in
0)

clear 

mencoder -oac copy -ovc copy -idx -o "$OUTPUT" "$name" "$name2"

;;
1)
_CANCEL_MSG ;; 

3)
ln2tb ;;


esac
#!/bin/bash
# cut segments from a video file
SCRIPT_NAME="c.ln2tb-video-splice"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT

set -e


# Do Not Change
DATE=$(date -I )

TIME=$(date +%I:%M )


player=$(dialog --extra-button --extra-label "Back" --stdout  --clear --menu \
"Which Video player to cut from?" 10 50 50 \
"SMPlayer" "" "VLC" "" )

if [ "$player" = "SMPlayer" ];
then video_file=$(ps x | grep /usr/bin/smplayer | grep -v grep | cut -d/ -f5-100 )


elif [ "$player" = "VLC" ];
then video_file=$(ps x | grep /usr/bin/vlc | grep -v grep | cut -d/ -f5-100 )

fi

   
format=$(echo "$video_file" | sed 's/^.*\.\([^.]*\)$/\1/' )

path=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the path of the input file" 10 50 "/$video_file" )

save_path=$(dialog --extra-button --extra-label "Back" --stdout  --clear --menu \
"Where to save the file?" 10 50 50 \
"Home" "" "Shared - Dropbox" "" "Shared - BTSync" "" )

if [ "$save_path" = "Home" ];
then path2=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the path of the output file" 10 50 "$MYHOME/($DATE)-($TIME).$format" )



elif [ "$save_path" = "Shared - Dropbox" ];
then path2=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the path of the output file" 10 50 "$DROPBOX/($DATE)-($TIME).$format" )



elif [ "$save_path" = "Shared - BTSync" ];
then path2=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the path of the output file" 10 50 "$BTSYNC/($DATE)-($TIME).$format" )


fi




# Start
S_HOURS=$(dialog --extra-button --extra-label "Back" --stdout  --title "START POSITION" --menu "Hour (hh:0?)" 13 50 50 "00" "" "01" "" "02" "" "03" "" "04" "" )
S_MINUTES=$(dialog --extra-button --extra-label "Back" --stdout  --title "START POSITION" --menu "Minute (First Digit) (mm:?*)" 14 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" )
S_MINUTES_2=$(dialog --extra-button --extra-label "Back" --stdout  --title "START POSITION" --menu "Minute (Second Digit) (mm:*?)" 17 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" "6" "" "7" "" "8" "" "9" "" )
S_SECONDS=$(dialog --extra-button --extra-label "Back" --stdout  --title "START POSITION" --menu "Second (First Digit) (ss:?*)" 14 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" )
S_SECONDS_2=$(dialog --extra-button --extra-label "Back" --stdout  --title "START POSITION" --menu "Second (Second Digit) (ss:*?)" 17 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" "6" "" "7" "" "8" "" "9" "" )

C_START=""$S_HOURS":"$S_MINUTES""$S_MINUTES_2":"$S_SECONDS""$S_SECONDS_2""

# End
E_HOURS=$(dialog --extra-button --extra-label "Back" --stdout  --title "END POSITION" --menu "Hour (hh:0?)" 13 50 50 "00" "" "01" "" "02" "" "03" "" "04" "" )
E_MINUTES=$(dialog --extra-button --extra-label "Back" --stdout  --title "END POSITION" --menu "Minute (First Digit) (mm:?*)" 14 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" )
E_MINUTES_2=$(dialog --extra-button --extra-label "Back" --stdout  --title "END POSITION" --menu "Minute (Second Digit) (mm:*?)" 17 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" "6" "" "7" "" "8" "" "9" "" )
E_SECONDS=$(dialog --extra-button --extra-label "Back" --stdout  --title "END POSITION" --menu "Second (First Digit) (ss:?*)" 14 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" )
E_SECONDS_2=$(dialog --extra-button --extra-label "Back" --stdout  --title "END POSITION" --menu "Second (Second Digit) (ss:*?)" 17 50 50 "0" "" "1" "" "2" "" "3" "" "4" "" "5" "" "6" "" "7" "" "8" "" "9" "" )

C_END=""$E_HOURS":"$E_MINUTES""$E_MINUTES_2":"$E_SECONDS""$E_SECONDS_2""


# start=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the start position (hh:mm:ss)" 10 50 "00::" )

# end=$(dialog --extra-button --extra-label "Back" --stdout  --clear --inputbox "Enter the end position (hh:mm:ss)" 10 50 "00::" )




 # Maybe copy multiple streams 
 #ffmpeg -i "$path" -vcodec copy -c:a copy -map 0:1 -map 0:2 -acodec copy -ss $start -t $end "$path2"


  #Alternative method (-endpos is seeking not absolute)
#    mencoder "$path" -ss $start -endpos $end -ovc copy -oac copy -noskip -skiplimit 1 -ofps 25 -mc 0 -o "$path2"


  ffmpeg -i "$path" -vcodec copy -acodec copy -ss "$C_START" -to "$C_END" "$path2"
#!/bin/bash
# (Add - Move - Delete - Rename - Change - Check) and do lots of shit to the Media Collection
SCRIPT_NAME="ln2tb"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



answer=$(dialog --stdout  --extra-button --extra-label "Back" --menu \
"Choose the command You Wish to Execute" 14 50 50 \
"1- Add" "" \
"2- Delete" "" \
"3- Find & Check Resolution" "" \
"4- Edit Videos" "" \
"5- Check for Duplicates" "" \
"6- Check Mounts" "" )



case $? in
0)

if [ "$answer" = "1- Add" ]
then c.ln2tb-add


elif [ "$answer" = "2- Delete" ]
then c.ln2tb-delete


elif [ "$answer" = "3- Find & Check Resolution" ]
then c.ln2tb-find


elif [ "$answer" = "4- Edit Videos" ]
then c.ln2tb-video


elif [ "$answer" = "5- Check for Duplicates" ]
then c.ln2tb-dupes


elif [ "$answer" = "6- Check Mounts" ]
then c.ln2tb-mount-check




fi

;;
1)
_CANCEL_MSG 

;; 
3)
exit 1 ;;
esac
