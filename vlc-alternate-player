#!/bin/bash
# Wrapper for vlc that checks for subs, xspf & time files
SCRIPT_NAME="vlc-alternate-player"
PID=$$


# Source the VAR MOAS
source /usr/local/bin/VAR-SCRIPT



depends=('vlc' 'curl' 'sed' 'ffprobe' 'perl')

usage(){
	echo "Usage: $0 filename"
	exit 1
}
 
check_file_exist(){
	f="$1"
	
	if [[ ! -f "$f" ]]
	then  
	echo "File Not Found"
	exit 1
	fi
}


VLC_PORT_GENERATOR(){

	xy="$( perl -e 'print int rand 100,print int rand 100,print int rand 100,; ' 2>/dev/null | cut -b 1-2 )"

	VLC_PORT="88$xy"

}


for i in "${depends[@]}" ;do which "$i" > /dev/null 2>&1 || (echo -e "Make sure the package ( $i ) is installed" && exit 2) ; done

[[ $# -eq 0 ]] && usage

check_file_exist "$@"

#########################################################
FNAME="$1"


TMP1="$(mktemp)"
TMP2="$(mktemp)"
TIME_TMP="$(mktemp)"
TRIGGER1="$(mktemp)"
TRIGGER2="$(mktemp)"
TRIGGER3="$(mktemp)"


# To get the filename without extensions
FILENAME="$( echo "$FNAME" | rev | cut -d"."  -f2- | rev )"
# To get the filename without the path
FILENAME2="$( echo "$FNAME" | rev | cut -d"/" -f1  | rev )"
# To get the path without the filename
FILENAME3="$( dirname "$FNAME" )"


# Change (RESET_TIME) to whatever value the counter should reset on.
#+ i.e: if the video was closed with less than 10 seconds remaining
#+ the next time it is opened it resets the position and starts from the beginning.
#+ use "0" to disable
RESET_TIME="10"


# Generates a random port for VLC http interface
VLC_PORT_GENERATOR


# Update the save position file
VLC_POLL()
{
	touch "$TRIGGER1"

	while [ -f "$TRIGGER1" ] ; do 
	sleep .6
	[ -f "$TRIGGER2" ] &&\
	curl -s -u ":vlcremote" http://127.0.0.1:"$VLC_PORT"/requests/status.json \
	| grep time | sed 's/,//g' | cut -b 10-
	done >> "$TIME_TMP" &

	while [ -f "$TRIGGER2" ] ; do
	sleep 1
	sed '/^$/d;/^ $/d;/^0$/d' "$TIME_TMP" | tail -n1  | tee "$FILENAME".time.txt
	done &
}

CHECK_SUBS()
{
	# Find Subs
	if [ -f "$(ls "$FILENAME"*.srt 2>/dev/null |head -n1)" -o -f "$(ls "$FILENAME"*.sub 2>/dev/null |head -n1)" ]
	then	return 0
	else	
	filebot -get-missing-subtitles --lang en -non-strict "$FNAME" > "$TMP2" 2>&1
	grep -q "No matching subtitles found" "$TMP2" && notify-send "Media" "Subtitle Not Found" || (notify-send "Media" "Subtitle Found - Reloading VLC" ; sleep 1 ; sudo beep ; sleep 1 ; sudo beep ; sleep 1 ; sudo beep ; xte 'keydown Control_R' 'keydown Alt_R' 'key 0' 'keyup Control_R' 'keyup Alt_R' ; CURRENTWIN="$(xdotool getwindowname $(xdotool getwindowfocus))" ; wmctrl -a "VLC media player" && sleep .1 && xte 'key n' ; wmctrl -a "$CURRENTWIN")
	fi
}

# Start the process
VLC_POLL &
CHECK_SUBS &

	# Insert the filename into the media log
	echo "" >> "$PLAYER_LAST_WATCHED"/"$DAY0".txt
	echo "$(date | cut -d" " -f 1-5) <-> Started  - ($FILENAME2)" >> "$PLAYER_LAST_WATCHED"/"$DAY0".txt

	# REPEAT variable comes from the repeater script to prevent clogging this file needlessly
	[ -z "$REPEAT" ] && echo "$FNAME" >> "$PLAYER_LAST_WATCHED"/"Last-Video".txt

	touch "$TRIGGER2"

	LENGTH="$(ffprobe -show_entries format=duration -v quiet -of csv="p=0" -i "$FNAME" | cut -d. -f1)"
	CURRENT_POSITION="$(sed '/^$/d;/^ $/d;/^0$/d' "$FILENAME".time.txt 2>/dev/null | tail -n1)"
	
	# Zero-out the current position if null
	if [ -z "$CURRENT_POSITION" ]
	then	CURRENT_POSITION="0"
	fi
	
	# Zero-out the length if null
	if [ -z "$LENGTH" ]
	then	LENGTH="0"
	fi
	
	# Check if current position is less than the RESET_TIME
	if [ "$( ((LENGTH - CURRENT_POSITION)) )" -lt "$RESET_TIME" ]
	then	START_POSITION="0"
	else	START_POSITION="$CURRENT_POSITION"
	fi


	START_TIME=$(date +%s)

TIME_BEFORE_WATCHED()
{
	touch "$TRIGGER3"
	TIMER=120
	while [ -f "$TRIGGER3" ] ; do
	while [ 0 -ne "$TIMER" ] ; do
	[ -f "$TRIGGER2" ] || break
	notify-send "Time before marking as Watched" "$TIMER"
	TIMER=$(($TIMER-30)) ; 	sleep 30
	done
	rm "$TRIGGER3"
	done
	
	sleep 1
	[ "$TIMER" = "0" ] && notify-send "File will be marked as Watched"
	
}

TIME_BEFORE_WATCHED &

	# Play the file
	if [ -f "$FILENAME".xspf ]
	then	vlc --quiet "$FILENAME".xspf --play-and-exit --extraintf=http --http-host 127.0.0.1 --http-port "$VLC_PORT" --http-password 'vlcremote' >/dev/null 2>&1
	else	vlc --quiet "$FNAME" --start-time "$START_POSITION" --play-and-exit --extraintf=http --http-host 127.0.0.1 --http-port "$VLC_PORT" --http-password 'vlcremote' >/dev/null 2>&1
	fi
	
	# Update the xspf after playing the file (if found)
	if [ -f "$FILENAME".xspf ]
	then
	CURRENT_POSITION="$(sed '/^$/d;/^ $/d;/^0$/d' "$FILENAME".time.txt 2>/dev/null | tail -n1)"
	sed -i -e "s/start-time=.*</start-time=$CURRENT_POSITION</g" "$FILENAME".xspf
	fi
	
	rm "$TRIGGER1" "$TRIGGER2"


	

END_TIME="$(date +%s)"
END_TIME_SEC=$(( END_TIME - START_TIME ))

[ "$END_TIME_SEC" -gt 60 ] &&  echo "$(date | cut -d" " -f 1-5) <-> Finished - ($FILENAME2)" >> "$PLAYER_LAST_WATCHED"/"$DAY0".txt

nohup sleep 1 >/dev/null 2>&1 && KODI_LAST_WATCHED="$(ls -t ~/.kodi/userdata/Database/MyVideo* |head -n 1)" && sqlite3 "$KODI_LAST_WATCHED" "select strFilename, playCount from files where strFilename like '%$FILENAME2' ;" | head -n1  | sed 's/^|1//g;/|$/d;s/^[ \t]*//;s/[ \t]*$//;/^$/d' | cut -d"|" -f1 >> "$TMP1" && while read a ; do notify-send "Media" "$a - Marked as Watched" ; done < "$TMP1" &
